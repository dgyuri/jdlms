/**
 * Copyright 2012-17 Fraunhofer ISE
 *
 * This file is part of jDLMS.
 * For more information visit http://www.openmuc.org
 *
 * jDLMS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * jDLMS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with jDLMS.  If not, see <http://www.gnu.org/licenses/>.
 */
/**
 * This class file was automatically generated by the AXDR compiler that is part of jDLMS (http://www.openmuc.org)
 */

package org.openmuc.jdlms.internal.asn1.cosem;

import java.io.IOException;
import java.io.InputStream;

import org.openmuc.jasn1.ber.BerByteArrayOutputStream;
import org.openmuc.jdlms.internal.asn1.axdr.AxdrType;
import org.openmuc.jdlms.internal.asn1.axdr.types.AxdrEnum;

public class Variable_Access_Specification implements AxdrType {

    public byte[] code = null;

    public static enum Choices {
        _ERR_NONE_SELECTED(-1),
        VARIABLE_NAME(2),
        PARAMETERIZED_ACCESS(4),
        BLOCK_NUMBER_ACCESS(5),
        READ_DATA_BLOCK_ACCESS(6),
        WRITE_DATA_BLOCK_ACCESS(7),;

        private int value;

        private Choices(int value) {
            this.value = value;
        }

        public int getValue() {
            return this.value;
        }

        public static Choices valueOf(long tagValue) {
            Choices[] values = Choices.values();

            for (Choices c : values) {
                if (c.value == tagValue) {
                    return c;
                }
            }
            return _ERR_NONE_SELECTED;
        }
    }

    private Choices choice;

    public Integer16 variable_name = null;

    public Parameterized_Access parameterized_access = null;

    public Block_Number_Access block_number_access = null;

    public Read_Data_Block_Access read_data_block_access = null;

    public Write_Data_Block_Access write_data_block_access = null;

    public Variable_Access_Specification() {
    }

    public Variable_Access_Specification(byte[] code) {
        this.code = code;
    }

    @Override
    public int encode(BerByteArrayOutputStream axdrOStream) throws IOException {
        if (code != null) {
            for (int i = code.length - 1; i >= 0; i--) {
                axdrOStream.write(code[i]);
            }
            return code.length;

        }
        if (choice == Choices._ERR_NONE_SELECTED) {
            throw new IOException("Error encoding AxdrChoice: No item in choice was selected.");
        }

        int codeLength = 0;

        if (choice == Choices.WRITE_DATA_BLOCK_ACCESS) {
            codeLength += write_data_block_access.encode(axdrOStream);
            AxdrEnum c = new AxdrEnum(7);
            codeLength += c.encode(axdrOStream);
            return codeLength;
        }

        if (choice == Choices.READ_DATA_BLOCK_ACCESS) {
            codeLength += read_data_block_access.encode(axdrOStream);
            AxdrEnum c = new AxdrEnum(6);
            codeLength += c.encode(axdrOStream);
            return codeLength;
        }

        if (choice == Choices.BLOCK_NUMBER_ACCESS) {
            codeLength += block_number_access.encode(axdrOStream);
            AxdrEnum c = new AxdrEnum(5);
            codeLength += c.encode(axdrOStream);
            return codeLength;
        }

        if (choice == Choices.PARAMETERIZED_ACCESS) {
            codeLength += parameterized_access.encode(axdrOStream);
            AxdrEnum c = new AxdrEnum(4);
            codeLength += c.encode(axdrOStream);
            return codeLength;
        }

        if (choice == Choices.VARIABLE_NAME) {
            codeLength += variable_name.encode(axdrOStream);
            AxdrEnum c = new AxdrEnum(2);
            codeLength += c.encode(axdrOStream);
            return codeLength;
        }

        // This block should be unreachable
        throw new IOException("Error encoding AxdrChoice: No item in choice was encoded.");
    }

    @Override
    public int decode(InputStream iStream) throws IOException {
        int codeLength = 0;
        AxdrEnum choosen = new AxdrEnum();

        codeLength += choosen.decode(iStream);
        resetChoices();
        this.choice = Choices.valueOf(choosen.getValue());

        if (choice == Choices.VARIABLE_NAME) {
            variable_name = new Integer16();
            codeLength += variable_name.decode(iStream);
            return codeLength;
        }

        if (choice == Choices.PARAMETERIZED_ACCESS) {
            parameterized_access = new Parameterized_Access();
            codeLength += parameterized_access.decode(iStream);
            return codeLength;
        }

        if (choice == Choices.BLOCK_NUMBER_ACCESS) {
            block_number_access = new Block_Number_Access();
            codeLength += block_number_access.decode(iStream);
            return codeLength;
        }

        if (choice == Choices.READ_DATA_BLOCK_ACCESS) {
            read_data_block_access = new Read_Data_Block_Access();
            codeLength += read_data_block_access.decode(iStream);
            return codeLength;
        }

        if (choice == Choices.WRITE_DATA_BLOCK_ACCESS) {
            write_data_block_access = new Write_Data_Block_Access();
            codeLength += write_data_block_access.decode(iStream);
            return codeLength;
        }

        throw new IOException("Error decoding AxdrChoice: Identifier matched to no item.");
    }

    public void encodeAndSave(int encodingSizeGuess) throws IOException {
        BerByteArrayOutputStream axdrOStream = new BerByteArrayOutputStream(encodingSizeGuess);
        encode(axdrOStream);
        code = axdrOStream.getArray();
    }

    public Choices getChoiceIndex() {
        return this.choice;
    }

    public void setvariable_name(Integer16 newVal) {
        resetChoices();
        choice = Choices.VARIABLE_NAME;
        variable_name = newVal;
    }

    public void setparameterized_access(Parameterized_Access newVal) {
        resetChoices();
        choice = Choices.PARAMETERIZED_ACCESS;
        parameterized_access = newVal;
    }

    public void setblock_number_access(Block_Number_Access newVal) {
        resetChoices();
        choice = Choices.BLOCK_NUMBER_ACCESS;
        block_number_access = newVal;
    }

    public void setread_data_block_access(Read_Data_Block_Access newVal) {
        resetChoices();
        choice = Choices.READ_DATA_BLOCK_ACCESS;
        read_data_block_access = newVal;
    }

    public void setwrite_data_block_access(Write_Data_Block_Access newVal) {
        resetChoices();
        choice = Choices.WRITE_DATA_BLOCK_ACCESS;
        write_data_block_access = newVal;
    }

    private void resetChoices() {
        choice = Choices._ERR_NONE_SELECTED;
        variable_name = null;
        parameterized_access = null;
        block_number_access = null;
        read_data_block_access = null;
        write_data_block_access = null;
    }

    @Override
    public String toString() {
        if (choice == Choices.VARIABLE_NAME) {
            return "choice: {variable_name: " + variable_name + "}";
        }

        if (choice == Choices.PARAMETERIZED_ACCESS) {
            return "choice: {parameterized_access: " + parameterized_access + "}";
        }

        if (choice == Choices.BLOCK_NUMBER_ACCESS) {
            return "choice: {block_number_access: " + block_number_access + "}";
        }

        if (choice == Choices.READ_DATA_BLOCK_ACCESS) {
            return "choice: {read_data_block_access: " + read_data_block_access + "}";
        }

        if (choice == Choices.WRITE_DATA_BLOCK_ACCESS) {
            return "choice: {write_data_block_access: " + write_data_block_access + "}";
        }

        return "unknown";
    }

}
