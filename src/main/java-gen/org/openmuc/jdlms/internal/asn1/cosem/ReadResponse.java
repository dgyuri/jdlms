/**
 * Copyright 2012-17 Fraunhofer ISE
 *
 * This file is part of jDLMS.
 * For more information visit http://www.openmuc.org
 *
 * jDLMS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * jDLMS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with jDLMS.  If not, see <http://www.gnu.org/licenses/>.
 */
/**
 * This class file was automatically generated by the AXDR compiler that is part of jDLMS (http://www.openmuc.org)
 */

package org.openmuc.jdlms.internal.asn1.cosem;

import java.io.IOException;
import java.io.InputStream;

import org.openmuc.jasn1.ber.BerByteArrayOutputStream;
import org.openmuc.jdlms.internal.asn1.axdr.AxdrType;
import org.openmuc.jdlms.internal.asn1.axdr.types.AxdrEnum;
import org.openmuc.jdlms.internal.asn1.axdr.types.AxdrSequenceOf;

public class ReadResponse extends AxdrSequenceOf<ReadResponse.SubChoice> {

    @Override
    protected SubChoice createListElement() {
        return new SubChoice();
    }

    protected ReadResponse(int length) {
        super(length);
    }

    public ReadResponse() {
    } // Call empty base constructor

    public static class SubChoice implements AxdrType {

        public byte[] code = null;

        public static enum Choices {
            _ERR_NONE_SELECTED(-1),
            DATA(0),
            DATA_ACCESS_ERROR(1),
            DATA_BLOCK_RESULT(2),
            BLOCK_NUMBER(3),;

            private int value;

            private Choices(int value) {
                this.value = value;
            }

            public int getValue() {
                return this.value;
            }

            public static Choices valueOf(long tagValue) {
                Choices[] values = Choices.values();

                for (Choices c : values) {
                    if (c.value == tagValue) {
                        return c;
                    }
                }
                return _ERR_NONE_SELECTED;
            }
        }

        private Choices choice;

        public Data data = null;

        public AxdrEnum data_access_error = null;

        public Data_Block_Result data_block_result = null;

        public Unsigned16 block_number = null;

        public SubChoice() {
        }

        public SubChoice(byte[] code) {
            this.code = code;
        }

        @Override
        public int encode(BerByteArrayOutputStream axdrOStream) throws IOException {
            if (code != null) {
                for (int i = code.length - 1; i >= 0; i--) {
                    axdrOStream.write(code[i]);
                }
                return code.length;

            }
            if (choice == Choices._ERR_NONE_SELECTED) {
                throw new IOException("Error encoding AxdrChoice: No item in choice was selected.");
            }

            int codeLength = 0;

            if (choice == Choices.BLOCK_NUMBER) {
                codeLength += block_number.encode(axdrOStream);
                AxdrEnum c = new AxdrEnum(3);
                codeLength += c.encode(axdrOStream);
                return codeLength;
            }

            if (choice == Choices.DATA_BLOCK_RESULT) {
                codeLength += data_block_result.encode(axdrOStream);
                AxdrEnum c = new AxdrEnum(2);
                codeLength += c.encode(axdrOStream);
                return codeLength;
            }

            if (choice == Choices.DATA_ACCESS_ERROR) {
                codeLength += data_access_error.encode(axdrOStream);
                AxdrEnum c = new AxdrEnum(1);
                codeLength += c.encode(axdrOStream);
                return codeLength;
            }

            if (choice == Choices.DATA) {
                codeLength += data.encode(axdrOStream);
                AxdrEnum c = new AxdrEnum(0);
                codeLength += c.encode(axdrOStream);
                return codeLength;
            }

            // This block should be unreachable
            throw new IOException("Error encoding AxdrChoice: No item in choice was encoded.");
        }

        @Override
        public int decode(InputStream iStream) throws IOException {
            int codeLength = 0;
            AxdrEnum choosen = new AxdrEnum();

            codeLength += choosen.decode(iStream);
            resetChoices();
            this.choice = Choices.valueOf(choosen.getValue());

            if (choice == Choices.DATA) {
                data = new Data();
                codeLength += data.decode(iStream);
                return codeLength;
            }

            if (choice == Choices.DATA_ACCESS_ERROR) {
                data_access_error = new AxdrEnum();
                codeLength += data_access_error.decode(iStream);
                return codeLength;
            }

            if (choice == Choices.DATA_BLOCK_RESULT) {
                data_block_result = new Data_Block_Result();
                codeLength += data_block_result.decode(iStream);
                return codeLength;
            }

            if (choice == Choices.BLOCK_NUMBER) {
                block_number = new Unsigned16();
                codeLength += block_number.decode(iStream);
                return codeLength;
            }

            throw new IOException("Error decoding AxdrChoice: Identifier matched to no item.");
        }

        public void encodeAndSave(int encodingSizeGuess) throws IOException {
            BerByteArrayOutputStream axdrOStream = new BerByteArrayOutputStream(encodingSizeGuess);
            encode(axdrOStream);
            code = axdrOStream.getArray();
        }

        public Choices getChoiceIndex() {
            return this.choice;
        }

        public void setdata(Data newVal) {
            resetChoices();
            choice = Choices.DATA;
            data = newVal;
        }

        public void setdata_access_error(AxdrEnum newVal) {
            resetChoices();
            choice = Choices.DATA_ACCESS_ERROR;
            data_access_error = newVal;
        }

        public void setdata_block_result(Data_Block_Result newVal) {
            resetChoices();
            choice = Choices.DATA_BLOCK_RESULT;
            data_block_result = newVal;
        }

        public void setblock_number(Unsigned16 newVal) {
            resetChoices();
            choice = Choices.BLOCK_NUMBER;
            block_number = newVal;
        }

        private void resetChoices() {
            choice = Choices._ERR_NONE_SELECTED;
            data = null;
            data_access_error = null;
            data_block_result = null;
            block_number = null;
        }

        @Override
        public String toString() {
            if (choice == Choices.DATA) {
                return "choice: {data: " + data + "}";
            }

            if (choice == Choices.DATA_ACCESS_ERROR) {
                return "choice: {data_access_error: " + data_access_error + "}";
            }

            if (choice == Choices.DATA_BLOCK_RESULT) {
                return "choice: {data_block_result: " + data_block_result + "}";
            }

            if (choice == Choices.BLOCK_NUMBER) {
                return "choice: {block_number: " + block_number + "}";
            }

            return "unknown";
        }

    }

}
