/**
 * Copyright 2012-17 Fraunhofer ISE
 *
 * This file is part of jDLMS.
 * For more information visit http://www.openmuc.org
 *
 * jDLMS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * jDLMS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with jDLMS.  If not, see <http://www.gnu.org/licenses/>.
 */
/**
 * This class file was automatically generated by the AXDR compiler that is part of jDLMS (http://www.openmuc.org)
 */

package org.openmuc.jdlms.internal.asn1.cosem;

import java.io.IOException;
import java.io.InputStream;

import org.openmuc.jasn1.ber.BerByteArrayOutputStream;
import org.openmuc.jdlms.internal.asn1.axdr.AxdrType;

public class Cosem_Attribute_Descriptor implements AxdrType {

    public byte[] code = null;
    public Unsigned16 class_id = null;

    public Cosem_Object_Instance_Id instance_id = null;

    public Integer8 attribute_id = null;

    public Cosem_Attribute_Descriptor() {
    }

    public Cosem_Attribute_Descriptor(byte[] code) {
        this.code = code;
    }

    public Cosem_Attribute_Descriptor(Unsigned16 class_id, Cosem_Object_Instance_Id instance_id,
            Integer8 attribute_id) {
        this.class_id = class_id;
        this.instance_id = instance_id;
        this.attribute_id = attribute_id;
    }

    @Override
    public int encode(BerByteArrayOutputStream axdrOStream) throws IOException {

        int codeLength;

        if (code != null) {
            codeLength = code.length;
            for (int i = code.length - 1; i >= 0; i--) {
                axdrOStream.write(code[i]);
            }
        }
        else {
            codeLength = 0;
            codeLength += attribute_id.encode(axdrOStream);

            codeLength += instance_id.encode(axdrOStream);

            codeLength += class_id.encode(axdrOStream);

        }

        return codeLength;

    }

    @Override
    public int decode(InputStream iStream) throws IOException {
        int codeLength = 0;

        class_id = new Unsigned16();
        codeLength += class_id.decode(iStream);

        instance_id = new Cosem_Object_Instance_Id();
        codeLength += instance_id.decode(iStream);

        attribute_id = new Integer8();
        codeLength += attribute_id.decode(iStream);

        return codeLength;
    }

    public void encodeAndSave(int encodingSizeGuess) throws IOException {
        BerByteArrayOutputStream axdrOStream = new BerByteArrayOutputStream(encodingSizeGuess);
        encode(axdrOStream);
        code = axdrOStream.getArray();
    }

    @Override
    public String toString() {
        return "sequence: {" + "class_id: " + class_id + ", instance_id: " + instance_id + ", attribute_id: "
                + attribute_id + "}";
    }

}
